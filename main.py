"""
ü§ñ Pudim - Chatbot por Voz para Raspberry Pi 4

Um assistente virtual em portugu√™s brasileiro que responde por voz,
consulta PDFs locais, informa clima e hor√°rios, e realiza intera√ß√µes sociais.

"""

import sys
import argparse
from chatbot import PudimBot, initialize_bot


def show_help():
    """Mostra informa√ß√µes de ajuda"""
    help_text = """
ü§ñ Pudim - Chatbot por Voz para Raspberry Pi 4

MODOS DE EXECU√á√ÉO:
  --interactive    Modo interativo via texto (para desenvolvimento/teste)
  --service        Modo servi√ßo (carrega bot na mem√≥ria e aguarda)
  --conversation   Inicia conversa por voz imediatamente
  --help           Mostra esta ajuda

EXEMPLOS:
  python main.py --interactive     # Teste via texto
  python main.py --service         # Carrega como servi√ßo
  python main.py --conversation    # Conversa por voz
  python main.py                   # Modo padr√£o (conversa por voz)

INTEGRA√á√ÉO COM ROB√î:
  O modo --service √© ideal para integra√ß√£o com c√≥digo de movimento do rob√¥.
  Use as fun√ß√µes do m√≥dulo chatbot.py para controlar o bot externamente.
"""
    print(help_text)


def run_interactive_mode(bot):
    """Executa modo interativo"""
    print("üìù Modo Interativo (Texto)")
    bot.start_interactive_mode()


def run_service_mode(bot):
    """Executa modo servi√ßo"""
    print("üîß Modo Servi√ßo")
    print("Bot carregado na mem√≥ria e pronto para uso externo.")
    print("Use as fun√ß√µes do m√≥dulo chatbot.py para controlar.")
    print("Pressione Ctrl+C para encerrar.")
    try:
        import time
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüëã Encerrando servi√ßo...")


def run_conversation_mode(bot):
    """Executa modo conversa por voz"""
    print("üé§ Modo Conversa (Voz)")
    if not bot.stt.is_available():
        print("‚ùå STT n√£o dispon√≠vel. Usando modo interativo.")
        bot.start_interactive_mode()
    else:
        success = bot.activate_conversation(duration_minutes=10)
        if not success:
            print("‚ùå N√£o foi poss√≠vel iniciar a conversa.")


def run_default_mode(bot):
    """Executa modo padr√£o (conversa por voz)"""
    print("üé§ Modo Padr√£o (Conversa por Voz)")
    if not bot.stt.is_available():
        print("‚ùå STT n√£o dispon√≠vel. Usando modo interativo.")
        print("üí° Use --interactive para modo texto ou configure o STT.")
        bot.start_interactive_mode()
    else:
        success = bot.activate_conversation(duration_minutes=10)
        if not success:
            print("‚ùå N√£o foi poss√≠vel iniciar a conversa.")


def main():
    """Fun√ß√£o principal com suporte a m√∫ltiplos modos"""
    parser = argparse.ArgumentParser(
        description='Pudim - Chatbot por Voz para Raspberry Pi 4',
        add_help=False
    )
    parser.add_argument('--interactive', action='store_true', help='Modo interativo via texto')
    parser.add_argument('--service', action='store_true', help='Modo servi√ßo (carrega e aguarda)')
    parser.add_argument('--conversation', action='store_true', help='Inicia conversa por voz')
    parser.add_argument('--help', action='store_true', help='Mostra ajuda')
    
    args = parser.parse_args()
    
    # Mostra ajuda se solicitado
    if args.help:
        show_help()
        return
    
    print("ü§ñ Inicializando Pudim...")
    
    try:
        # Inicializa o bot (carrega modelos na mem√≥ria)
        bot = initialize_bot()
        
        # Executa modo selecionado
        if args.interactive:
            run_interactive_mode(bot)
        elif args.service:
            run_service_mode(bot)
        elif args.conversation:
            run_conversation_mode(bot)
        else:
            run_default_mode(bot)
                    
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
        print("üí° Tente executar com --interactive para modo texto")
        print("üí° Ou use --help para ver todas as op√ß√µes")
        sys.exit(1)


if __name__ == "__main__":
    main()