"""
M√≥dulo para leitura e processamento de arquivos PDF
"""
import os
import re
from typing import List, Dict, Optional
import pdfplumber
import pandas as pd
from rapidfuzz import process, fuzz
import logging
logging.getLogger("pdfminer").setLevel(logging.ERROR)


class PDFReader:
    """Gerenciador de leitura de PDFs"""
    
    def __init__(self, data_folder: str = "data"):
        self.data_folder = data_folder
        self.pdf_contents = {}
        self.load_pdfs()
    
    def load_pdfs(self):
        """Carrega todos os PDFs da pasta data"""
        if not os.path.exists(self.data_folder):
            print(f"‚ö†Ô∏è Pasta {self.data_folder} n√£o encontrada")
            return
        
        pdf_files = [f for f in os.listdir(self.data_folder) if f.endswith('.pdf')]
        
        if not pdf_files:
            print(f"‚ö†Ô∏è Nenhum arquivo PDF encontrado em {self.data_folder}")
            return
        
        for pdf_file in pdf_files:
            try:
                file_path = os.path.join(self.data_folder, pdf_file)
                if "horario_" in pdf_file:
                    key = pdf_file.replace("horario_", "").split(".")[0]
                else:
                    key = pdf_file.split(".")[0]
                content = self._extract_tables_from_pdfs(file_path)
                self.pdf_contents[key] = content
                print(f"‚úÖ PDF carregado: {pdf_file}")
            except Exception as e:
                print(f"‚ùå Erro ao carregar {pdf_file}: {e}")
    
    def _extract_tables_from_pdfs(self, pdf_path):
        """Extrai tabelas e executa limpeza de um PDF e retorna como DataFrame"""
        dataframe = None
        with pdfplumber.open(pdf_path) as pdf:
            first_page = pdf.pages[0]
            table = first_page.extract_table()

            # Converte a tabela extra√≠da em um DataFrame
            df = pd.DataFrame(table)

            # Encontra a primeira linha n√£o vazia para definir os nomes das colunas
            for i, row in df.iterrows():
                if all(cell is not None and cell.strip() != '' for cell in row):
                    df.columns = row  # Coloca a primeira linha valida como cabe√ßalho
                    df = df.iloc[i + 1:]  # Remove as linhas acima do cabe√ßalho
                    break

            # Adiciona uma nova coluna 'SOURCE' com o nome do arquivo PDF
            # df['ORIGEM'] = key

            # Guarda o DataFrame em um dicion√°rio com o nome do arquivo PDF como chave
            df['DISCIPLINA'] = df['DISCIPLINA'].str.replace(r"\bI\b", "1", regex=True)
            df['DISCIPLINA'] = df['DISCIPLINA'].str.replace(r"\bII\b", "2", regex=True)
            df['DISCIPLINA'] = df['DISCIPLINA'].str.replace(r"\bIII\b", "3", regex=True)
            df['DISCIPLINA'] = df['DISCIPLINA'].str.replace(r"\bIV\b", "4", regex=True)
            df['DISCIPLINA'] = df['DISCIPLINA'].str.replace(r"\bV\b", "5", regex=True)
            df['DISCIPLINA'] = df['DISCIPLINA'].str.replace(",", "")
            df['DISCIPLINA'] = df['DISCIPLINA'].str.replace("  ", " ", regex=True)
            df['DISCIPLINA'] = df['DISCIPLINA'].str.strip()
            dataframe = df

        return dataframe

    def clear_text(self, text: str) -> str:
        """Limpa o texto removendo espa√ßos extras e caracteres especiais"""
        palavras_proibidas = [
            'hor√°rio','horario', 'aula', 'disciplina', 'mat√©ria', 'turma', 'curso',
            'professor', 'sala', 'localiza√ß√£o', 'local', 'qual',
            '√©'
        ]
        text = text.strip()
        text = re.sub(r'\s+', ' ', text)
        text = re.sub(r'[^\w\s]', '', text)  # Remove caracteres especiais
        text = re.sub(r'\b([a-zA-Z]{1,2})\b', '', text) # Remove palavras de 1 ou 2 letras
        text = re.sub(r'\bum\b', '1', text, flags=re.IGNORECASE)
        text = re.sub(r'\bdois\b', '2', text, flags=re.IGNORECASE)
        text = re.sub(r'\btres\b', '3', text, flags=re.IGNORECASE)
        text = re.sub(r'\bquatro\b', '4', text, flags=re.IGNORECASE)
        text = re.sub(r'\bcinco\b', '5', text, flags=re.IGNORECASE)
        text = ' '.join(word for word in text.split() if word.lower() not in palavras_proibidas)
        text = text.strip()
        return text
        

    def answer_question(self, question: str) -> Optional[str]:
        """Responde uma pergunta baseada nos PDFs"""
        question_lower = question.lower()
        # print(f"üîç DEBUG - Pergunta processada: '{question_lower}'")
        if self.is_horario_question(question_lower):
            question_lower = self.clear_text(question_lower)
            # print(f"üîç DEBUG - Pergunta processada: '{question_lower}'")
            return self.response_horario_question(question_lower)
        
        elif self.is_qual_professor_question(question_lower):
            question_lower = self.clear_text(question_lower)
            # print(f"üîç DEBUG - Pergunta processada: '{question_lower}'")
            return self.response_professor_question(question_lower)
        
        elif self.is_sala_question(question_lower):
            question_lower = self.clear_text(question_lower)
            # print(f"üîç DEBUG - Pergunta processada: '{question_lower}'")
            return self.response_sala_question(question_lower)
        
        else:
            return "‚ùå Pergunta n√£o reconhecida. Tente reformular novamente."



    def is_horario_question(self, text: str) -> bool:
        """Verifica se est√° perguntando como est√°"""
        questions = [
            'hor√°rio','horario','qual o hor√°rio', 'qual hor√°rio', 'hor√°rio da aula', 'hor√°rio da disciplina',
            'hor√°rio da mat√©ria', 'hor√°rio da turma', 'hor√°rio do curso', 'qual o hor√°rio da aula de', 'qual o hor√°rio da disciplina de','qual o hor√°rio da mat√©ria de', 
            'qual o hor√°rio da turma de', 'qual √© o hor√°rio',  'qual √© o hor√°rio da aula', 'qual √© o hor√°rio da disciplina', 'qual √© o hor√°rio da mat√©ria', 
            'qual √© o hor√°rio da turma', 'qual √© o hor√°rio do curso', 'hor√°rio de aula', 'hor√°rio de disciplina', 'hor√°rio de mat√©ria', 
            'hor√°rio de turma', 'hor√°rio de curso', 'qual √© o hor√°rio da disciplina de','qual √© o hor√°rio da mat√©ria de', 'qual √© o hor√°rio da turma de'
        ]
        text_lower = text.lower().strip()
        return any(re.search(rf"\b{question}\b", text_lower) for question in questions)
    
    def is_qual_professor_question(self, text: str) -> bool:
        """Verifica se est√° perguntando como est√°"""
        questions = [
            'professor de','professor da', 'professor do','qual o professor', 'qual o professor da aula', 'qual o professor da disciplina', 'qual √© o professor', 'qual professor', 'que professor', 'qual o professor da mat√©ria', 'professor da aula de', 'professor da disciplina de', 'professor da mat√©ria de', 'professor da turma de'
        ]
        text_lower = text.lower().strip()
        return any(re.search(rf"\b{question}\b", text_lower) for question in questions)

    def is_sala_question(self, text: str) -> bool:
        """Verifica se est√° perguntando como est√°"""
        questions = [
            'sala', 'qual a sala', 'qual a sala da aula', 'qual a sala da disciplina', 'qual √© a sala', 'qual sala', 'que sala', 'sala da aula', 
            'sala da disciplina', 'sala da mat√©ria', 'sala da turma', 'qual a sala da mat√©ria', 'sala da aula de', 
            'sala da disciplina de', 'sala da mat√©ria de', 'sala da turma de'
        ]
        text_lower = text.lower().strip()
        return any(re.search(rf"\b{question}\b", text_lower) for question in questions)
            
    def is_locate_professor_question(self, text: str) -> bool:
        """Verifica se est√° perguntando como est√°"""
        questions = [
            'onde est√° o professor', 'onde est√° a professora', 'onde fica o professor',
            'onde fica a professora', 'localiza√ß√£o do professor', 'localiza√ß√£o da professora',
            'onde encontro o professor', 'onde encontro a professora'
        ]
        text_lower = text.lower().strip()
        return any(re.search(rf"\b{question}\b", text_lower) for question in questions)



    def gerar_combinacoes(self, texto, max_ngram=6):
        """Gera combina√ß√µes de n-gramas a partir de um texto"""
        palavras = texto.lower().split()
        return [" ".join(palavras[i:i+n]) for i in range(len(palavras)) for n in range(1, max_ngram+1) if i + n <= len(palavras)]


    def _search_course(self, question: str):
        """Procura o curso na pergunta e retorna o c√≥digo, nome completo e palavra original"""
        courses = {
            'cc': 'ci√™ncia da computa√ß√£o',
            'ema': 'engenharia de materiais',
            'emp': 'engenharia de produ√ß√£o',
            'emt': 'engenharia de mecatr√¥nica',
            'tads': 'tecnologia em an√°lise de desenvolvimento',
            'tcn': 'tecnologia de constru√ß√£o naval'
        }
        best_match = ""
        best_score = 0
        original_word = ""
        palavras = self.gerar_combinacoes(question)
        full_list = list(courses.values()) + list(courses.keys())
        for palavra in palavras:
            match, score, _ = process.extractOne(palavra, full_list, scorer=fuzz.ratio)
            # print(f"üîç DEBUG - Verificando palavra: '{palavra}' -> Match: '{match}' com score: {score}")
            if score > best_score:
                best_score = score
                original_word = palavra
                best_match = match
        
        if best_score >= 40:
            # print(f"üîç DEBUG - Melhor match encontrado: '{best_match}' com score: {best_score}")
            for code, full_name in courses.items():
                if best_match.lower() == code or best_match.lower() == full_name.lower():
                    return code, full_name, original_word
        else:
            return None, None, original_word




    def response_horario_question(self, question: str) -> str:
        """Responde perguntas sobre hor√°rios de disciplinas"""
        best_match = [None, 0]
        question_lower = question.lower()
        code, full_name, original_word = self._search_course(question)
        # print(f"üîç DEBUG - Pergunta processada: '{question_lower}'")
        if code and full_name:
            question_lower = question_lower.replace(original_word, "", 1).strip()
            palavras = self.gerar_combinacoes(question_lower)
            list_lower = [x.lower() for x in self.pdf_contents[code]['DISCIPLINA'].unique().tolist()]
            for palavra in palavras:
                match = process.extractOne(palavra, list_lower, scorer=fuzz.ratio)
                if match[1] > 40 and match[1] > best_match[1]:
                    best_match = match

            if best_match[0]:
                df = self.pdf_contents[code]
                result = df[df['DISCIPLINA'] == best_match[0].upper()]['HOR√ÅRIO'].to_string(index=False)
                time_start, time_end = result.split(" - ")
                return f"O hor√°rio da disciplina {best_match[0]} de {full_name} come√ßa √†s {time_start} e termina √†s {time_end}."
            else:
                return f"‚ö†Ô∏è Disciplina n√£o encontrado na pergunta: {question}"

        else:
            return f"‚ö†Ô∏è Curso n√£o encontrado na pergunta: {question}"
        
    def response_professor_question(self, question: str) -> str:
        """Responde perguntas sobre professores de disciplinas"""
        best_match = [None, 0]
        question_lower = question.lower()
        code, full_name, original_word = self._search_course(question)
        # print(f"üîç DEBUG - Pergunta processada: '{question_lower}'")
        if code and full_name:
            question_lower = question_lower.replace(original_word, "", 1).strip()
            palavras = self.gerar_combinacoes(question_lower)
            list_lower = [x.lower() for x in self.pdf_contents[code]['DISCIPLINA'].unique().tolist()]
            for palavra in palavras:
                match = process.extractOne(palavra, list_lower, scorer=fuzz.ratio)
                if match[1] > 40 and match[1] > best_match[1]:
                    best_match = match
            if best_match[0]:
                df = self.pdf_contents[code]
                result = df[df['DISCIPLINA'] == best_match[0].upper()]['PROFESSOR(A)'].to_string(index=False)
                return f"O professor da disciplina {best_match[0]} de {full_name} √© {result.strip()}"
            else:
                return f"‚ö†Ô∏è Disciplina n√£o encontrado na pergunta: {question}"

        else:
            return f"‚ö†Ô∏è Curso n√£o encontrado na pergunta: {question}"

        
    def response_sala_question(self, question: str) -> str:
        """Responde perguntas sobre salas de disciplinas"""
        best_match = [None, 0]
        question_lower = question.lower()
        code, full_name, original_word = self._search_course(question)
        # print(f"üîç DEBUG - Pergunta processada: '{question_lower}'")
        if code and full_name:
            question_lower = question_lower.replace(original_word, "", 1).strip()
            palavras = self.gerar_combinacoes(question_lower)
            list_lower = [x.lower() for x in self.pdf_contents[code]['DISCIPLINA'].unique().tolist()]
            for palavra in palavras:
                match = process.extractOne(palavra, list_lower, scorer=fuzz.ratio)
                # print(f"üîç DEBUG - Verificando: {palavra} (match: {match[0]}, score {match[1]})")
                if match[1] > 40 and match[1] > best_match[1]:
                    best_match = match
            if best_match[0]:
                # print(f"üîç DEBUG - Melhor match encontrado: {best_match[0]} com score {best_match[1]}")
                df = self.pdf_contents[code]
                result = df[df['DISCIPLINA'] == best_match[0].upper()]['SALA'].to_string(index=False)
                return f"A sala da disciplina {best_match[0]} de {full_name} √© {result.strip()}"
            else:
                return f"‚ö†Ô∏è Disciplina n√£o encontrado na pergunta: {question}"

        else:
            return f"‚ö†Ô∏è Curso n√£o encontrado na pergunta: {question}"


if __name__ == "__main__":
    # Teste r√°pido do PDFReader
    pdf =  PDFReader(data_folder="data")
    # Exemplo de perguntas, DESCOMENTE PARA TESTAR

    # x = pdf.answer_question("Qual o hor√°rio da topicos especiais de filiencias da computa√ß√£o")
    # x = pdf.answer_question("Qual o hor√°rio da topicos especiais de defensores computa√ß√£o")
    # x = pdf.answer_question("Qual √© o professor da disciplina inteligencia 1 do ci√™ncia da computa√ß√£o?")
    # x = pdf.answer_question("qual o hor√°rio da disciplina entre a gente √© computacional, um fim √© a computa√ß√£o")
    # x = pdf.answer_question("Qual o hor√°rio da disciplina entre a gente √© computacional, um fim √© a computa√ß√£o.")
    # x = pdf.answer_question("qual a sala da disciplina inteligente √© computacional 1?")
    # x = pdf.answer_question("qual a sala da disciplina introdu√ß√£o √† ci√™ncia da comta√ß√£o √© ci√™ncia da comta√ß√£o?")
    # x = pdf.answer_question("Qual o hor√°rio da aula de sistas digitais de filisias da computa√ß√£o")
    # x = pdf.answer_question("qual a sala de introdu√ß√£o do que √© a ind√∫stria na v√°l de offshore. defene.")
    print(x)